分支的逻辑是：
1.主流分支是开发的稳定版，创建一个分支作为开发测试，如果效果很好就把他合并到主分支。
2.多分支用于多人开发。

创建分支
git branch dev
切换分支
git checkout dev
查看在哪个分支
git branch
分支合并
git merge --no-ff -m 'info' dev
删除分支
git branch -d dev


单人情景：
1.在做一个项目，突然有加急任务，比如需要修复bug
但是我手头上的事在工作区修改了一点点做到一半
更难受的是，加急任务就是我现在要修复我现在做的项目文件中
怎么办？？

首先，我们修改工作区，暂时保存
不要add到暂存区
git stash
这条指令会将工作区修改的文件保存到缓存栈中，但是不是暂存区
然后
git status
发现工作区是干净的
我么可以着手紧急任务修复bug，并add和commit
然后
git stash apply
或者
git stash pop
两者都是讲之前存在缓存栈中的修改文件送回工作区
区别在于apply会在缓存栈保留之前的记录，pop则在弹出文件之后就没有了
然后
就可以继续手头没有完成的工作


2.
